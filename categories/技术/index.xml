<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on Utop&#39;s Blog</title>
    <link>https://www.ffutop.com/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on Utop&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans-CN</language>
    <lastBuildDate>Thu, 06 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ffutop.com/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>tcp Tunnel</title>
      <link>https://www.ffutop.com/posts/2020-08-06-tun/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-08-06-tun/</guid>
      <description>&lt;p&gt;所谓专用网络(Private Network)，本质上不过是物理上局域网概念的延伸，将分属两地的局域网络联通，构建一个更大的逻辑局域网，并保证通信的私密性和独占性。最质朴的物理解决方案——在两个局域网络之间拉一个网线；不过距离越远，成本越高，还得考虑信号衰减等问题。相对而言租用运营商的线路就比较实际。但终究物理上的解决方案相较于使用互联网还是过于高昂，如何通过互联网构建一个逻辑上的专用网络？虚拟专用网络(Virtual Private Network, VPN) 提供了答案。&lt;/p&gt;
&lt;p&gt;要构建 VPN ，最基本的要求是两地局域网络互通。即如下图中的设备 &lt;code&gt;172.16.1.1&lt;/code&gt; 要像在同一个局域网内，对内网 IP (分属不同的局域网)为 &lt;code&gt;172.20.1.2&lt;/code&gt; 的设备发起并建立连接。但从基本的网络协议栈来看，IP 报文根本无法到达 B 区域的局域网。得益于分层的协议栈，TCP/IP 的五个层次，上下层次间通过接口和服务来通信，每个层次仅仅承载数据(payload)而不关心数据的格式和内容。理论上任何层次的数据都可以由其它任何层次或者它当前的层次所承载，也就出现了很多 XX over YY 的网络模型。在 A 区域将 IP 报文通过 YY 协议封装，到 B 区域再解包，像是从局域网内收到 IP 报文一样，发送给目的主机，就像是 IP 报文穿越了一条隧道。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;+-------------------------------------------------------+
|                       A 地区                          |
| +------------+  +------------+       +--------------+ |
| | 172.16.1.1 |  | 172.16.1.2 |  .... | 172.16.39.60 | |
| +------+-----+  +------+-----+       +-------+------+ |
|        |               |                     |        |
|        +---------------+-----+---------------+        |
|                              |                        |
|                         +----+----+                   |
|                         |   NAT   |                   |
|                         +----^----+                   |
                               |
                               |
    +--------------------------v------------------+
    |    INTERNET                     INTERNET    |
    +--------------------------^------------------+
                               |
|                              |                        |
|                         +----v----+                   |
|                         |   NAT   |                   |
|                         +----+----+                   |
|                              |                        |
|        +---------------+-----+---------------+        |
|        |               |                     |        |
| +------------+  +------------+       +--------------+ |
| | 172.20.1.1 |  | 172.20.1.2 |  .... | 172.20.39.60 | |
| +------+-----+  +------+-----+       +-------+------+ |
|                       B 地区                          |
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>URI不规范编码解决方案</title>
      <link>https://www.ffutop.com/posts/2020-07-25-non-standard-uri/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-07-25-non-standard-uri/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/rfc/rfc7230.txt&#34;&gt;RFC 7230&lt;/a&gt; 与 &lt;a href=&#34;https://tools.ietf.org/rfc/rfc3986.txt&#34;&gt;RFC 3986&lt;/a&gt; 定义了 HTTP/1.1 标准并对 URI 的编解码问题作出了规范。但是，文本形式的规范和最终落地的标准之间总是存在着差距。标准中共 82 个字符无需编码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789:/?#@!$&amp;amp;&#39;()*+,;_-.~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于需要编码的字符，百分号编码方案要求 ASCII 字符表示成两个 16 进制值并添加前缀 &lt;code&gt;%&lt;/code&gt;；对于非 ASCII 字符, 需要转换为 UTF-8 字节序, 然后每个字节按照上述方式表示成两个 16 进制值并添加前缀 &lt;code&gt;%&lt;/code&gt;。比如 &lt;code&gt;|&lt;/code&gt; 将被表示为 &lt;code&gt;%7C&lt;/code&gt; 或 &lt;code&gt;%7c&lt;/code&gt;（大小写无关）；&lt;code&gt;啊&lt;/code&gt; 将被表示为 &lt;code&gt;%E5%95%8A&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最近因为 Tomcat 版本升级，遭遇了非标到标准实现的过渡，新版本 Tomcat 严格执行 RFC 规范直接将非标准的 URI 请求强制拒绝。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;2020-07-15 16:02:12,931  INFO 1 --- [http-nio-8080-exec-7] o.a.c.h.Http11Processor                  : Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986
        at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:468) ~[tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:294) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_161]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_161]
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>纠缠不清的 OAuth vs OpenId</title>
      <link>https://www.ffutop.com/posts/2020-07-17-oauth-and-openid/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-07-17-oauth-and-openid/</guid>
      <description>认证: 完成对用户身份的确认，验证当前自称为某种身份的用户，确实是所声称的用户 授权: 一般指对特定身份的用户授予访问数字化资源的权限 OAuth 2.0 是一个关</description>
    </item>
    
    <item>
      <title>HTTP Large Header Fields Problem</title>
      <link>https://www.ffutop.com/posts/2020-04-11-large-http-header/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-04-11-large-http-header/</guid>
      <description>&lt;p&gt;&lt;em&gt;首次遇到请求头过大的问题，做个记录。特别是在本次处理陷入了误区，做了太多无谓的猜测&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;请求头过大导致响应错误码 400 (Bad Request)、414 (URI Too Long)、431 (Request Header Fields Too Large) 的情况不多，不过原因和解决方案都是比较清晰的。客户端请求的请求头过大导致超出了服务器支持的缓冲区。如果客户端可控，控制请求头的大小；否则，适当调大服务器配置的缓冲区大小。&lt;/p&gt;
&lt;p&gt;最近生产上碰到了这个问题，颇费了一番功夫。接手问题时得到了几个错误的信息，干扰到了处理的全过程。甚至为此去重读了 NGINX Directive &lt;code&gt;client_header_buffer_size&lt;/code&gt; 和 &lt;code&gt;large_client_header_buffers&lt;/code&gt; 在 1.8.1 版本的实现。&lt;/p&gt;
&lt;p&gt;最原始的问题是：NGINX 接收到了大请求头(4.5k)的请求，最终响应了错误码 400 Bad Request 。&lt;/p&gt;
&lt;p&gt;真实的背景因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求链路 NGINX -&amp;gt; k8s nginx ingress -&amp;gt; k8s pods (Tomcat)&lt;/li&gt;
&lt;li&gt;NGINX &lt;code&gt;large_client_header_buffers&lt;/code&gt; 使用了默认配置 &lt;code&gt;4 8k&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Tomcat maxHttpHeaderSize 使用了默认配置 (default 8192)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>基于DNS的数据库切换·事故</title>
      <link>https://www.ffutop.com/posts/2020-02-28-db-transfer-based-on-dns/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-02-28-db-transfer-based-on-dns/</guid>
      <description>&lt;p&gt;我们生产环境上所有的应用都是通过域名来访问 MySQL、Redis 等基础服务。按说域名相较于 IP，凭空多了个 DNS 解析动作，是一个劣化的方案。但好处在于，一旦需要切换基础服务，将带来巨大的利好。可是，任何忽视DNS Record TTL的切换方案，都将伴随着巨大的风险。甚至，成为否定该利好的佐证。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>分布式共识·Raft Algorithm</title>
      <link>https://www.ffutop.com/posts/2020-02-17-raft/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-02-17-raft/</guid>
      <description>&lt;h2 id=&#34;分布式系统与共识&#34;&gt;分布式系统与共识&lt;/h2&gt;
&lt;p&gt;分布式系统是一组透过网络相互连接通信与传递信息的计算机，协同来完成一件任务的系统。任务可能是大规模计算，可能是冗余存储。按此分类，又有分布式计算系统和分布式存储系统。&lt;/p&gt;
&lt;p&gt;典型的分布式计算系统/框架有 MapReduce、Spark；分布式存储系统有 GFS 等。虽然有此划分，但分布式计算几乎必然地涉及到存储的需求。存储为计算提供支持，计算促进存储的发展。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.ffutop.com/3885C079-B4ED-4B0E-AD86-60AB8D4D4792.png&#34; alt=&#34;分布式系统分类&#34;&gt;&lt;/p&gt;
&lt;p&gt;计算是无状态的，存储是有状态的。在分布式的存储下，为了让计算机各自维护的状态协商达成一致，就必然地需要共识算法的支持。Wait a minute. 计算机间的协商需要共识算法？&lt;/p&gt;
&lt;p&gt;计算机间的协作可以划分为中心化与去中心化两大类。中心化的方案自然是有一个权威的 Master 来协调所有的计算机的任务，但前提是这个 Master 必须可靠，即依赖一个单点就必须要对它的可用性进行担保；去中心化的方案，计算机间都是平等的，如何就一个问题达成共识，就是面对的核心问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;共识与一致性&#34;&gt;共识与一致性&lt;/h3&gt;
&lt;p&gt;共识(Consensus)：机器之间就一个值/命令等达成共同的认识，一般是面向输入，处理并维护这个值（状态）&lt;/p&gt;
&lt;p&gt;一致性(Consistency)：一致性表述为机器对外提供服务时的表现。向机器 A 或机器 B 读取同一数据，两者的返回值是相同的。当然，也有不同的弱化版本，允许一些特定条件下的不一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 2014 年之前，Paxos [1] 几乎是解决共识问题的唯一选择。但难懂是一个致命的问题，并且难以工程化也是重大的缺陷。Raft 的出现无疑是一道曙光，熟读，实践，豁然开朗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Goroutine 与调度</title>
      <link>https://www.ffutop.com/posts/2020-01-27-go-routine/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-01-27-go-routine/</guid>
      <description>&lt;p&gt;虽然我们在日常沟通中把 Goroutine 和线程、协程之类的执行流概念混杂着沟通，但 Go 语言一直坚持 &amp;ldquo;Goroutine&amp;rdquo;。 宣称这一名词的产生是由于线程、协程、进程等无法准确表达其概念。本篇将就这一声明进行探究，Goroutine 与线程、协程究竟有何不同。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Calico 网络通信解析</title>
      <link>https://www.ffutop.com/posts/2019-12-24-how-calico-works/</link>
      <pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-12-24-how-calico-works/</guid>
      <description>&lt;p&gt;在 Kubernetes 集群中，Calico 区别于 Flannel 的最显著特征，就是其宣称可以不借助隧道技术，是建立在纯三层协议上的解决方案。也就是说，Calico 通过建立一些路由信息，就构建了单节点/多节点网络命名空间隔离下的通信网络。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTPS 安全通讯如何上演？</title>
      <link>https://www.ffutop.com/posts/2019-12-14-https/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-12-14-https/</guid>
      <description>&lt;p&gt;最初的 HTTP 以明文传输方式运行在 Internet 上。随着越来越多安全敏感型应用的出现，HTTP over TCP 无法提供足够的安全性保障。SSL 及其继任者 TLS 在这样的背景下产生，提供面向信道的安全性。本文着力于展现 HTTP over TLS (即 HTTPS)的工作方式，以及与此密切相关的数字证书、对称/非对称加密等，但不涉及密码学相关实现及 SSL/TLS 的安全性证明。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GroovyClassLoader 引发的 FullGC</title>
      <link>https://www.ffutop.com/posts/2019-11-07-groovyclassloader-fullgc/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-11-07-groovyclassloader-fullgc/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;近日，一个线上应用的存活探针频繁报警。几分钟内 Full GC 次数暴涨上百次，&lt;strong&gt;stop the world&lt;/strong&gt; :&amp;lt; 从 &lt;code&gt;gc.log&lt;/code&gt; 中，看到的原因是触及了 &lt;code&gt;Metaspace&lt;/code&gt; 的阈值，进而引发了 FGC。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;2019-11-05T14:31:38.880+0800: 504600.716: [Full GC (Metadata GC Threshold) 2019-11-05T14:31:38.880+0800: 504600.716: [CMS2019-11-05T14:31:39.364+0800: 504601.201: [CMS-concurrent-mark: 0.485/0.488 secs] [Times: user=0.48 sys=0.00, real=0.49 secs]
 (concurrent mode failure): 266828K-&amp;gt;266865K(873856K), 1.3752377 secs] 267430K-&amp;gt;266865K(1267072K), [Metaspace: 204152K-&amp;gt;204152K(1267712K)], 1.3757441 secs] [Times: user=1.36 sys=0.00, real=1.38 secs]
2019-11-05T14:31:40.256+0800: 504602.092: [Full GC (Last ditch collection) 2019-11-05T14:31:40.256+0800: 504602.092: [CMS: 266865K-&amp;gt;266841K(873856K), 0.8590901 secs] 266865K-&amp;gt;266841K(1267072K), [Metaspace: 204152K-&amp;gt;204152K(1267712K)], 0.8595047 secs] [Times: user=0.86 sys=0.00, real=0.86 secs]
2019-11-05T14:31:41.117+0800: 504602.953: [Full GC (Metadata GC Threshold) 2019-11-05T14:31:41.117+0800: 504602.953: [CMS: 266841K-&amp;gt;266816K(873856K), 0.9109948 secs] 267218K-&amp;gt;266816K(1267072K), [Metaspace: 204153K-&amp;gt;204153K(1267712K)], 0.9114975 secs] [Times: user=0.91 sys=0.00, real=0.91 secs]
2019-11-05T14:31:42.028+0800: 504603.865: [Full GC (Last ditch collection) 2019-11-05T14:31:42.028+0800: 504603.865: [CMS: 266816K-&amp;gt;266769K(873856K), 1.0351283 secs] 266816K-&amp;gt;266769K(1267072K), [Metaspace: 204153K-&amp;gt;204153K(1267712K)], 1.0355630 secs] [Times: user=0.92 sys=0.00, real=1.04 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;FGC 前后，&lt;code&gt;Metaspace&lt;/code&gt; 占用的内存没有得到任何释放。&lt;em&gt;[Metaspace: 204153K-&amp;gt;204153K(1267712K)]&lt;/em&gt; 。这也就是反复 FGC 的原因。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>