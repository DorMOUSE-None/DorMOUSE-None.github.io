<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Utop&#39;s Blog</title>
    <link>https://www.ffutop.com/tags/java/</link>
    <description>Recent content in Java on Utop&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans-CN</language>
    <lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ffutop.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>时间(Timestamp)、日历(Calendar)与夏令时</title>
      <link>https://www.ffutop.com/posts/2021-03-15-datetime-vs-calendar/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2021-03-15-datetime-vs-calendar/</guid>
      <description>&lt;p&gt;一个特殊的日期(&lt;code&gt;1988-04-10&lt;/code&gt;, 字段类型 &lt;code&gt;date&lt;/code&gt;)，从数据库尝试读取却始终抛出异常 &lt;code&gt;HOUR_OF_DAY: 0-&amp;gt;1&lt;/code&gt; 。最初百思不得其解，其后发现这个日期恰好是夏令时的起始日，而后又纠结于 1988 年夏令时“从 04 月 10 日早晨 2 时起，将时针往前拨一小时，即二时变三时”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>劫持 Java 应用 HTTP 请求</title>
      <link>https://www.ffutop.com/posts/2020-10-19-hijack-http-req/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-10-19-hijack-http-req/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;全链路追踪中，针对部分特殊的流量，希望将它引导到特定服务上（这个特定服务不在正常请求的链路上）——问题可以被抽象为解决进程间通信过程中目标进程的选择。&lt;/p&gt;
&lt;p&gt;进程间通信方式很多，本篇只关注 Java 进程间套接字通信下 HTTP 形式的请求劫持，引导特定流量到特定进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dubbo Telnet 调试</title>
      <link>https://www.ffutop.com/posts/2020-06-17-dubbo-telnet/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-06-17-dubbo-telnet/</guid>
      <description>&lt;p&gt;始于 Dubbo 2.0.6 的 Telnet Command 是一个令人兴奋的特性，极大地降低了服务化测试的成本，但是，&lt;a href=&#34;http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html&#34;&gt;寥寥数行的可怜文档&lt;/a&gt;无形地为使用增加了成本。此前虽然一直在使用 Telnet Command，但基本上是浅尝辄止，字符集的问题、重载方法的错误筛选等，都让我不得不对这个特性敬而远之，无法作为高频的生产力工具。最近，频繁出现的调试需求让我不得不尝试接受并熟悉 Dubbo Telnet Command。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文只针对 invoke 命令，基于 Dubbo 版本 2.6.7&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dubbo Telnet Command &lt;code&gt;invoke&lt;/code&gt; 命令的一般格式为 &lt;code&gt;invoke &amp;lt;全限定名&amp;gt;.&amp;lt;方法名&amp;gt;(&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;)&lt;/code&gt;。其中参数需要能被 JSON 解析，即提取命令中的 &lt;code&gt;&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;&lt;/code&gt; 部分，并包装上 &lt;code&gt;[]&lt;/code&gt; 构成 &lt;code&gt;[&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;]&lt;/code&gt; ，需要保证这个串是一个合法的 JSON Array。&lt;/p&gt;
&lt;p&gt;本文提供的示例均可在 &lt;a href=&#34;https://github.com/ffutop/dubbo-telnet-playground&#34;&gt;dubbo-telnet-playground&lt;/a&gt; 中找到。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP Large Header Fields Problem</title>
      <link>https://www.ffutop.com/posts/2020-04-11-large-http-header/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-04-11-large-http-header/</guid>
      <description>&lt;p&gt;&lt;em&gt;首次遇到请求头过大的问题，做个记录。特别是在本次处理陷入了误区，做了太多无谓的猜测&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;请求头过大导致响应错误码 400 (Bad Request)、414 (URI Too Long)、431 (Request Header Fields Too Large) 的情况不多，不过原因和解决方案都是比较清晰的。客户端请求的请求头过大导致超出了服务器支持的缓冲区。如果客户端可控，控制请求头的大小；否则，适当调大服务器配置的缓冲区大小。&lt;/p&gt;
&lt;p&gt;最近生产上碰到了这个问题，颇费了一番功夫。接手问题时得到了几个错误的信息，干扰到了处理的全过程。甚至为此去重读了 NGINX Directive &lt;code&gt;client_header_buffer_size&lt;/code&gt; 和 &lt;code&gt;large_client_header_buffers&lt;/code&gt; 在 1.8.1 版本的实现。&lt;/p&gt;
&lt;p&gt;最原始的问题是：NGINX 接收到了大请求头(4.5k)的请求，最终响应了错误码 400 Bad Request 。&lt;/p&gt;
&lt;p&gt;真实的背景因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求链路 NGINX -&amp;gt; k8s nginx ingress -&amp;gt; k8s pods (Tomcat)&lt;/li&gt;
&lt;li&gt;NGINX &lt;code&gt;large_client_header_buffers&lt;/code&gt; 使用了默认配置 &lt;code&gt;4 8k&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Tomcat maxHttpHeaderSize 使用了默认配置 (default 8192)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>基于DNS的数据库切换·事故</title>
      <link>https://www.ffutop.com/posts/2020-02-28-db-transfer-based-on-dns/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-02-28-db-transfer-based-on-dns/</guid>
      <description>&lt;p&gt;我们生产环境上所有的应用都是通过域名来访问 MySQL、Redis 等基础服务。按说域名相较于 IP，凭空多了个 DNS 解析动作，是一个劣化的方案。但好处在于，一旦需要切换基础服务，将带来巨大的利好。可是，任何忽视DNS Record TTL的切换方案，都将伴随着巨大的风险。甚至，成为否定该利好的佐证。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GroovyClassLoader 引发的 FullGC</title>
      <link>https://www.ffutop.com/posts/2019-11-07-groovyclassloader-fullgc/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-11-07-groovyclassloader-fullgc/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;近日，一个线上应用的存活探针频繁报警。几分钟内 Full GC 次数暴涨上百次，&lt;strong&gt;stop the world&lt;/strong&gt; :&amp;lt; 从 &lt;code&gt;gc.log&lt;/code&gt; 中，看到的原因是触及了 &lt;code&gt;Metaspace&lt;/code&gt; 的阈值，进而引发了 FGC。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;2019-11-05T14:31:38.880+0800: 504600.716: [Full GC (Metadata GC Threshold) 2019-11-05T14:31:38.880+0800: 504600.716: [CMS2019-11-05T14:31:39.364+0800: 504601.201: [CMS-concurrent-mark: 0.485/0.488 secs] [Times: user=0.48 sys=0.00, real=0.49 secs]
 (concurrent mode failure): 266828K-&amp;gt;266865K(873856K), 1.3752377 secs] 267430K-&amp;gt;266865K(1267072K), [Metaspace: 204152K-&amp;gt;204152K(1267712K)], 1.3757441 secs] [Times: user=1.36 sys=0.00, real=1.38 secs]
2019-11-05T14:31:40.256+0800: 504602.092: [Full GC (Last ditch collection) 2019-11-05T14:31:40.256+0800: 504602.092: [CMS: 266865K-&amp;gt;266841K(873856K), 0.8590901 secs] 266865K-&amp;gt;266841K(1267072K), [Metaspace: 204152K-&amp;gt;204152K(1267712K)], 0.8595047 secs] [Times: user=0.86 sys=0.00, real=0.86 secs]
2019-11-05T14:31:41.117+0800: 504602.953: [Full GC (Metadata GC Threshold) 2019-11-05T14:31:41.117+0800: 504602.953: [CMS: 266841K-&amp;gt;266816K(873856K), 0.9109948 secs] 267218K-&amp;gt;266816K(1267072K), [Metaspace: 204153K-&amp;gt;204153K(1267712K)], 0.9114975 secs] [Times: user=0.91 sys=0.00, real=0.91 secs]
2019-11-05T14:31:42.028+0800: 504603.865: [Full GC (Last ditch collection) 2019-11-05T14:31:42.028+0800: 504603.865: [CMS: 266816K-&amp;gt;266769K(873856K), 1.0351283 secs] 266816K-&amp;gt;266769K(1267072K), [Metaspace: 204153K-&amp;gt;204153K(1267712K)], 1.0355630 secs] [Times: user=0.92 sys=0.00, real=1.04 secs]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;FGC 前后，&lt;code&gt;Metaspace&lt;/code&gt; 占用的内存没有得到任何释放。&lt;em&gt;[Metaspace: 204153K-&amp;gt;204153K(1267712K)]&lt;/em&gt; 。这也就是反复 FGC 的原因。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>随机数生成器拖慢 Tomcat 启动速度</title>
      <link>https://www.ffutop.com/posts/2019-10-17-random/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-10-17-random/</guid>
      <description>&lt;p&gt;最近频繁发布应用，Tomcat 的启动效率竟然莫名其妙地出现了断崖式下降。正常 30 秒左右启动的应用，硬生生花了将近 7 分钟。通过检索日志发现了一些有意思的内容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;16-Oct-2019 14:23:31.999 WARNING [localhost-startStop-1] org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [386,690] milliseconds.
...
16-Oct-2019 14:23:33.111 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 410675 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 &lt;code&gt;SecureRandom&lt;/code&gt; 竟然花了 6 分多钟，占了整个启动时间的 94% 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Java】API 参数误定义的后果</title>
      <link>https://www.ffutop.com/posts/2019-02-27-java-fatal-api/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-02-27-java-fatal-api/</guid>
      <description>&lt;p&gt;工程项目中，定义 API 总是一个慎之又慎的操作。不能少，不满足调用方的需求就惨了；也不能多，不然就乱套了，自己维护困难，调用方也开始了自我发挥。虽然足够慎重，但绝大多数都逃不过最终不得不“改” API 的情况。今天要讨论的是在同一个类内同方法名不同参数（入参/出参）的情况。&lt;/p&gt;
&lt;p&gt;想要做到同方法名不同入参，很简单，就是“重载（Overload）”，日常都在使用。不再赘述！&lt;/p&gt;
&lt;p&gt;想要做到同方法名不同出参，答案就不再那么肯定了。当然，如果问把&lt;code&gt;void add(int)&lt;/code&gt; API 改写成 &lt;code&gt;int add(int)&lt;/code&gt;，可能得到的大多数回答都是可以。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java Instrumentation</title>
      <link>https://www.ffutop.com/posts/2018-08-15-java-instrumentation/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2018-08-15-java-instrumentation/</guid>
      <description>&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;
&lt;p&gt;从现有的前置知识来说，我们能够认识到两个事实:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Java Class 通过 ClassLoader 进行加载。
通过&lt;code&gt;全限定名&lt;/code&gt;进行区分。当需要加载新的类时，ClassLoader 通过双亲委派机制判断是否已经加载过这个类。
换句话说: Class 一经加载，就不会尝试重复加载 (至少按绝大多数人的认知来说，确实是的)&lt;/li&gt;
&lt;li&gt;有没有可能让被加载的 Class 与物理存储上的 .class 内容不同。
当然也是完全可以做到的。不管怎么说，CGlib 和 Java Proxy 也是一个耳熟能详的概念吧
(虽然可能不了解细节。在此，欢迎学习前置技能 &lt;a href=&#34;https://dormouse-none.github.io/2018-07-10-CGlib-Enhancer/&#34;&gt;CGlib Enhancer 主流程源码解析&lt;/a&gt; 和 &lt;a href=&#34;https://dormouse-none.github.io/2018-07-20-Java-Proxy/&#34;&gt;Java Proxy 源码解析&lt;/a&gt;。不过不影响本文后续内容)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另一个方面，也许绝大多数人都听说过所谓的&lt;code&gt;热部署&lt;/code&gt;。但是究竟怎么才能做到 &lt;code&gt;热部署&lt;/code&gt;(话题开得有点大哈。Y_Y 本文不讲这个)&lt;/p&gt;
&lt;p&gt;操作字节码一定是一个逃不开的话题，毕竟 Class 就是所谓的被加载到内存的字节码嘛。&lt;/p&gt;
&lt;p&gt;如何操作字节码? ASM, CGlib, Java Proxy, Javassist ? 不过这些都要等到需要被操作的类被加载了才行啊，似乎有点晚&amp;hellip;&lt;/p&gt;
&lt;p&gt;Java 提供了一个可行的机制，用来在 ClassLoader 加载字节码之前完成对操作字节码的目的&lt;/p&gt;
&lt;h2 id=&#34;instrumentation&#34;&gt;Instrumentation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;java.lang.instrument.Instrumentation&lt;/code&gt; 类为提供直接操作 Java 字节码的又一个途径(虽然 Java Doc 的说明是用来检测 Java 代码的)&lt;/p&gt;
&lt;p&gt;相信我这个说明是没有问题的。毕竟完成对代码检测的途径是直接修改字节码。&lt;/p&gt;
&lt;p&gt;下列有两种方法可以达到目的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当 JVM 以指示一个代理类的方式启动时，将传递给代理类的 premain 方法一个 Instrumentation 实例。&lt;/li&gt;
&lt;li&gt;当 JVM 提供某种机制在 JVM 启动之后某一时刻启动代理时，将传递给代理代码的 agentmain 方法一个 Instrumentation 实例。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;话不多说，下面将全部以实例来展现对这种 JVM 检测机制(虽然例子已经脱离了&lt;em&gt;检测&lt;/em&gt;的目的)的使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 安全访问与权限控制</title>
      <link>https://www.ffutop.com/posts/2018-07-04-jdk-permission/</link>
      <pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2018-07-04-jdk-permission/</guid>
      <description>&lt;h2 id=&#34;绪论&#34;&gt;绪论&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;本文只是对 Java 安全访问与权限控制的基础性探究。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本节与全文内容无关，如无兴趣阅读，可以跳过&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;了解 Java 安全访问相关内容的初衷，是准备在项目中利用 Java 标准库提供的 ServiceLoader 对 SPI 实现类进行&amp;quot;自动发现&amp;quot;和加载。
这对于将本项目作为二方库来依赖的上层项目将更为方便，只需要&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;META-INF.services&lt;/code&gt; 目录下配置被命名为 SPI 接口全限定名的文件及添加相关内容&lt;/li&gt;
&lt;li&gt;由项目的注册管理器触发下列 Java 代码&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    ServiceLoader&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;XxxPolicy&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; xxxPolicyServiceLoader &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ServiceLoader&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;XxxPolicy&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Iterator&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;XxxPolicy&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; it &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; xxxPolicyServiceLoader&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt; it&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
        XxxPolicy xxxPolicy &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; it&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// ... more code ...
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;就可以完成一个新的 SPI 策略的注册工作。&lt;/p&gt;
&lt;p&gt;但是，在尝试实现，了解了 ServiceLoader 源码，以及 DriverManager 和 mysql-connection-java-&lt;!-- raw HTML omitted --&gt;.jar 在注册 Driver 相关的代码。
发现怎么也绕不开 Java 安全访问相关的内容。诸如下列这段来自 DriverManager.loadInitialDrivers() 的代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;AccessController&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;doPrivileged&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;new&lt;/span&gt; PrivilegedAction&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;public&lt;/span&gt; Void &lt;span style=&#34;color:#06287e&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;

        ServiceLoader&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Driver&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; loadedDrivers &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; ServiceLoader&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;load&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Driver&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;);&lt;/span&gt;
        Iterator&lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt;Driver&lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; driversIterator &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; loadedDrivers&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;driversIterator&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
            driversIterator&lt;span style=&#34;color:#666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;catch&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;Throwable t&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;// Do nothing
&lt;/span&gt;&lt;span style=&#34;color:#60a0b0;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#666&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;诸如 AccessController, Permission, SecurityManager 的代码始终是一个绕不开的主旋律。&lt;/p&gt;
&lt;p&gt;为了探究这部分控制对项目中 ServiceLoader 的真正作用以及其编码意义，开始了对本文所描述的主体内容的初步了解。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>