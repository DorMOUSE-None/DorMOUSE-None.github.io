<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory leak on Utop&#39;s Blog</title>
    <link>https://www.ffutop.com/tags/memory-leak/</link>
    <description>Recent content in memory leak on Utop&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans-CN</language>
    <lastBuildDate>Sat, 06 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ffutop.com/tags/memory-leak/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JNI 引发的堆外内存泄露</title>
      <link>https://www.ffutop.com/posts/2019-07-06-jni-%E5%BC%95%E5%8F%91%E7%9A%84%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2019-07-06-jni-%E5%BC%95%E5%8F%91%E7%9A%84%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</guid>
      <description>&lt;p&gt;本以为写写异构代码也不算一件难事。毕竟做 Java 开发，日常也写些 C 代码，无论如何也不至于到棘手到地步。哪曾想，JNI 开发不难，但问题颇多。&lt;/p&gt;

&lt;p&gt;为了排查一个 JNI 的堆外内存泄露问题，简直是绞尽脑汁而不得其门。最后查找的问题原因也特别简单，但凡认真学习了 JNI 开发都能够避免。&lt;/p&gt;

&lt;p&gt;问题代码类似于下列代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;Main.h&amp;quot;

JNIEXPORT void JNICALL Java_Main_sayHi (JNIEnv *env, jobject jobj, jstring jstr)
{
    const char *str = (*env)-&amp;gt;GetStringUTFChars(env, jstr, 0);
    int len = (*env)-&amp;gt;GetStringUTFLength(env, jstr);

    // ... some code omitted 

    return ;
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>