<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mmap on Utop&#39;s Blog</title>
    <link>https://dormouse-none.github.io/tags/mmap/</link>
    <description>Recent content in mmap on Utop&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2018-2019 © ffutop</copyright>
    <lastBuildDate>Wed, 17 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://dormouse-none.github.io/tags/mmap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解 Linux Kernel (13) - 虚拟内存</title>
      <link>https://dormouse-none.github.io/posts/2019-07-17-understand-kernel-13/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://dormouse-none.github.io/posts/2019-07-17-understand-kernel-13/</guid>
      <description>几乎每个进程都有独立的虚拟地址空间，这是一个逻辑上的概念，用于建立进程对进程存储资源的认知。对于 32 位机，虚拟地址空间的大小通常是 4GB；对于 64 位机，最大可以达到 $2^{64}$ Bytes 。
本篇便是为了看看虚拟地址空间究竟如何被内核管理，又是怎样和物理内存、文件等资源关联。
启动新进程 虚拟地址空间与进程挂钩，在进程数据结构 task_struct 中由一个重要的参数 mm_struct 来维护。
struct mm_struct { struct vm_area_struct * mmap; /* list of VMAs */ struct rb_root mm_rb; unsigned long mmap_base; /* base of mmap area */ unsigned long task_size; /* size of task vm space */ pgd_t * pgd; atomic_t mm_count; /* How many references to &amp;quot;struct mm_struct&amp;quot; (users count as 1) */ int map_count; /* number of VMAs */ unsigned long start_code, end_code, start_data, end_data; unsigned long start_brk, brk, start_stack; unsigned long arg_start, arg_end, env_start, env_end; struct file *exe_file; /* .</description>
    </item>
    
  </channel>
</rss>