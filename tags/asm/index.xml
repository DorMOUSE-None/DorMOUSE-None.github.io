<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ASM on Utop&#39;s Blog</title>
    <link>https://www.ffutop.com/tags/asm/</link>
    <description>Recent content in ASM on Utop&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans-CN</language>
    <lastBuildDate>Wed, 15 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ffutop.com/tags/asm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java Instrumentation</title>
      <link>https://www.ffutop.com/posts/2018-08-15-java-instrumentation/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2018-08-15-java-instrumentation/</guid>
      <description>&lt;h2 id=&#34;start&#34;&gt;Start&lt;/h2&gt;
&lt;p&gt;从现有的前置知识来说，我们能够认识到两个事实:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Java Class 通过 ClassLoader 进行加载。
通过&lt;code&gt;全限定名&lt;/code&gt;进行区分。当需要加载新的类时，ClassLoader 通过双亲委派机制判断是否已经加载过这个类。
换句话说: Class 一经加载，就不会尝试重复加载 (至少按绝大多数人的认知来说，确实是的)&lt;/li&gt;
&lt;li&gt;有没有可能让被加载的 Class 与物理存储上的 .class 内容不同。
当然也是完全可以做到的。不管怎么说，CGlib 和 Java Proxy 也是一个耳熟能详的概念吧
(虽然可能不了解细节。在此，欢迎学习前置技能 &lt;a href=&#34;https://dormouse-none.github.io/2018-07-10-CGlib-Enhancer/&#34;&gt;CGlib Enhancer 主流程源码解析&lt;/a&gt; 和 &lt;a href=&#34;https://dormouse-none.github.io/2018-07-20-Java-Proxy/&#34;&gt;Java Proxy 源码解析&lt;/a&gt;。不过不影响本文后续内容)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;另一个方面，也许绝大多数人都听说过所谓的&lt;code&gt;热部署&lt;/code&gt;。但是究竟怎么才能做到 &lt;code&gt;热部署&lt;/code&gt;(话题开得有点大哈。Y_Y 本文不讲这个)&lt;/p&gt;
&lt;p&gt;操作字节码一定是一个逃不开的话题，毕竟 Class 就是所谓的被加载到内存的字节码嘛。&lt;/p&gt;
&lt;p&gt;如何操作字节码? ASM, CGlib, Java Proxy, Javassist ? 不过这些都要等到需要被操作的类被加载了才行啊，似乎有点晚&amp;hellip;&lt;/p&gt;
&lt;p&gt;Java 提供了一个可行的机制，用来在 ClassLoader 加载字节码之前完成对操作字节码的目的&lt;/p&gt;
&lt;h2 id=&#34;instrumentation&#34;&gt;Instrumentation&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;java.lang.instrument.Instrumentation&lt;/code&gt; 类为提供直接操作 Java 字节码的又一个途径(虽然 Java Doc 的说明是用来检测 Java 代码的)&lt;/p&gt;
&lt;p&gt;相信我这个说明是没有问题的。毕竟完成对代码检测的途径是直接修改字节码。&lt;/p&gt;
&lt;p&gt;下列有两种方法可以达到目的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当 JVM 以指示一个代理类的方式启动时，将传递给代理类的 premain 方法一个 Instrumentation 实例。&lt;/li&gt;
&lt;li&gt;当 JVM 提供某种机制在 JVM 启动之后某一时刻启动代理时，将传递给代理代码的 agentmain 方法一个 Instrumentation 实例。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;话不多说，下面将全部以实例来展现对这种 JVM 检测机制(虽然例子已经脱离了&lt;em&gt;检测&lt;/em&gt;的目的)的使用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CGlib Enhancer 主流程源码解析</title>
      <link>https://www.ffutop.com/posts/2018-07-10-cglib-enhancer-%E4%B8%BB%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2018-07-10-cglib-enhancer-%E4%B8%BB%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;此博文写作的目的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Core) 通过了解 CGlib Enhancer 的整个调用链，了解其对于唯一依赖的 ASM 库的调用方式。&lt;/li&gt;
&lt;li&gt;基于 Enhancer 对已有字节码进行增强的进一步理解与掌握。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ASM 核心包基本内容漫谈</title>
      <link>https://www.ffutop.com/posts/2018-06-25-asm-%E6%A0%B8%E5%BF%83%E5%8C%85%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9%E6%BC%AB%E8%B0%88/</link>
      <pubDate>Mon, 25 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2018-06-25-asm-%E6%A0%B8%E5%BF%83%E5%8C%85%E5%9F%BA%E6%9C%AC%E5%86%85%E5%AE%B9%E6%BC%AB%E8%B0%88/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文描述的 ASM 指的是 OW2 ASM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;asm-core-的结构&#34;&gt;ASM-Core 的结构&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;首先是一些概述性的内容。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;由于 ASM 操作的 JAVA 字节码有严格的格式规定，且即使随着 JVM 标准的升级也极少出现重大调整。
因此适用面狭窄的访问者模式在该项目中被大量地使用，并且已经到了丧心病狂的程度:)&lt;/p&gt;
&lt;p&gt;从核心包声明的类来看，主要包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ClassReader - 作为结构化对象，将接收(accept)访问者的访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;几种访问者抽象类以及相应的实现类&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;AnnotationVisitor -&amp;gt; AnnotationWriter&lt;/li&gt;
&lt;li&gt;ClassVisitor -&amp;gt; ClassWriter&lt;/li&gt;
&lt;li&gt;FieldVisitor -&amp;gt; FieldWriter&lt;/li&gt;
&lt;li&gt;MethodVisitor -&amp;gt; MethodWriter&lt;/li&gt;
&lt;li&gt;ModuleVisitor -&amp;gt; ModuleWriter&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Opcodes &amp;amp; Constants - ClassFile 中描述的大量常量符号与值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其它一些辅助的类&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Attribute - 用于处理非标准化的属性(ClassFile 允许&lt;a href=&#34;https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html&#34;&gt;JVMS&lt;/a&gt; 中未定义的 Attribute)&lt;/li&gt;
&lt;li&gt;ByteArray - 动态可自适应的 byte[] (字节数组)&lt;/li&gt;
&lt;li&gt;Context - ClassReader 在被解析(被访问)过程中用于表示“累积状态”的一个类/对象&lt;/li&gt;
&lt;li&gt;Symbol - 用于表示 ClassFile 中描述的 Constant 的基类&lt;/li&gt;
&lt;li&gt;SymbolTable - 用于存储常量池对象&lt;/li&gt;
&lt;li&gt;其它内容省略&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>