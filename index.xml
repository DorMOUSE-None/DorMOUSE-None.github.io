<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Utop&#39;s Blog</title>
    <link>https://www.ffutop.com/</link>
    <description>Recent content on Utop&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cmn-Hans-CN</language>
    <lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.ffutop.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>时间(Timestamp)、日历(Calendar)与夏令时</title>
      <link>https://www.ffutop.com/posts/2021-03-15-datetime-vs-calendar/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2021-03-15-datetime-vs-calendar/</guid>
      <description>&lt;p&gt;一个特殊的日期(&lt;code&gt;1988-04-10&lt;/code&gt;, 字段类型 &lt;code&gt;date&lt;/code&gt;)，从数据库尝试读取却始终抛出异常 &lt;code&gt;HOUR_OF_DAY: 0-&amp;gt;1&lt;/code&gt; 。最初百思不得其解，其后发现这个日期恰好是夏令时的起始日，而后又纠结于 1988 年夏令时“从 04 月 10 日早晨 2 时起，将时针往前拨一小时，即二时变三时”。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>双数组前缀树</title>
      <link>https://www.ffutop.com/posts/2021-01-24-darts/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2021-01-24-darts/</guid>
      <description>&lt;h2 id=&#34;一前缀树&#34;&gt;一、前缀树&lt;/h2&gt;
&lt;p&gt;前缀树，又称字典树。常见的场景为大规模词库下做词匹配、词前缀匹配、词频统计等。目前唯一碰到的业务场景只有自建 UGC 风控的违禁词检测。&lt;/p&gt;
&lt;p&gt;经典前缀树基于多叉树结构实现，组成字符串的字符全集数量决定了多叉树的阶。如下图为字符串集合 ab, abc, bc, d, da, dda 形成的前缀树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img.ffutop.com/5C605336-E961-463E-9919-9360FC8AFA27.png&#34; alt=&#34;Trie Tree&#34;&gt;
&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;图 1. Trie Tree&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;前缀树的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销，相较于哈希等能够显著降低失配字符串的匹配耗时。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL DeadLocks with INSERT</title>
      <link>https://www.ffutop.com/posts/2020-11-06-deadlock-insert-update/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-11-06-deadlock-insert-update/</guid>
      <description>&lt;p&gt;首次碰到 INSERT + UPDATE statement 造成的死锁问题，触及了知识盲区，费时做了分析。&lt;/p&gt;
&lt;h2 id=&#34;死锁场景描述&#34;&gt;死锁场景描述&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;下述所有事务隔离级别为 Read Committed&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 简化后的数据库表&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;user_address&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; (
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;主键&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;user_id&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;用户主键&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;comm_address&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;常用地址标识&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;address&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;200&lt;/span&gt;) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;地址&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;longitude&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;经度&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;latitude&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#40a070&#34;&gt;20&lt;/span&gt;) &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;纬度&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;create_time&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;建立时间&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;update_time&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;timestamp&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt; &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;更新时间&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;),
    &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;KEY&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;idx_user_id&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;user_id&lt;span style=&#34;color:#666&#34;&gt;`&lt;/span&gt;)
) ENGINE&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;InnoDB AUTO_INCREMENT&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#40a070&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;utf8 &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;utf8_bin &lt;span style=&#34;color:#007020;font-weight:bold&#34;&gt;COMMENT&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;用户常用地址&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2. 死锁事务时序&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;时序&lt;/th&gt;
&lt;th&gt;事务 1&lt;/th&gt;
&lt;th&gt;事务 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;START TRANSACTION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;START TRANSACTION&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;INSERT INTO user_address(user_id, address, longitude, latitude, create_time, update_time) VALUES ( &#39;c86d0f931d164fc1b53162355cf39fb4&#39;, &#39;浙江省 杭州市 余杭区 五常街道 XXX&#39;, 121000000, 31000000, NOW(), NOW());&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;INSERT INTO user_address(user_id, address, longitude, latitude, create_time, update_time) VALUES ( &#39;c86d0f931d164fc1b53162355cf39fb4&#39;, &#39;浙江省 杭州市 余杭区 五常街道 XXX&#39;, 121000000, 31000000, NOW(), NOW());&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UPDATE user_address SET comm_address = &#39;0&#39; WHERE user_id = &#39;c86d0f931d164fc1b53162355cf39fb4&#39;;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;UPDATE user_address SET comm_address = &#39;0&#39; WHERE user_id = &#39;c86d0f931d164fc1b53162355cf39fb4&#39;;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3. INNODB Monitor Output&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;------------------------

LATEST DETECTED DEADLOCK

------------------------

2020-11-03 08:25:25 0x7f2801e1d700

*** (1) TRANSACTION:

TRANSACTION 13335216894, ACTIVE 0 sec fetching rows

mysql tables in use 1, locked 1

LOCK WAIT 4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 1

MySQL thread id 680655, OS thread handle 139810239182592, query id 120901872537 10.1.X.YYY mask_user updating

UPDATE `user_address` SET

		`comm_address` = &amp;#39;0&amp;#39;

		WHERE `user_id` = &amp;#39;c760c70e42924b869beee418d3b30165&amp;#39;

*** (1) WAITING FOR THIS LOCK TO BE GRANTED:

RECORD LOCKS space id 2383 page no 125759 n bits 328 index idx_user_id of table `default`.`user_address` trx id 13335216894 lock_mode X locks rec but not gap waiting

Record lock, heap no 262 PHYSICAL RECORD: n_fields 2; compact format; info bits 0

 0: len 20; hex 6337363063373065343239323462383639626565; asc c760c70e42924b869bee;;

 1: len 4; hex 803c4394; asc  &amp;lt;C ;;



*** (2) TRANSACTION:

TRANSACTION 13335216895, ACTIVE 0 sec starting index read, thread declared inside InnoDB 5000

mysql tables in use 1, locked 1

3 lock struct(s), heap size 1136, 2 row lock(s), undo log entries 1

MySQL thread id 672593, OS thread handle 139809806997248, query id 120901872539 10.1.X.YYY mask_user updating

UPDATE `user_address` SET

		`comm_address` = &amp;#39;0&amp;#39;

		WHERE `user_id` = &amp;#39;c760c70e42924b869beee418d3b30165&amp;#39;

*** (2) HOLDS THE LOCK(S):

RECORD LOCKS space id 2383 page no 125759 n bits 328 index idx_user_id of table `default`.`user_address` trx id 13335216895 lock_mode X locks rec but not gap

Record lock, heap no 262 PHYSICAL RECORD: n_fields 2; compact format; info bits 0

 0: len 20; hex 6337363063373065343239323462383639626565; asc c760c70e42924b869bee;;

 1: len 4; hex 803c4394; asc  &amp;lt;C ;;



*** (2) WAITING FOR THIS LOCK TO BE GRANTED:

RECORD LOCKS space id 2383 page no 125759 n bits 328 index idx_user_id of table `default`.`user_address` trx id 13335216895 lock_mode X locks rec but not gap waiting

Record lock, heap no 261 PHYSICAL RECORD: n_fields 2; compact format; info bits 0

 0: len 20; hex 6337363063373065343239323462383639626565; asc c760c70e42924b869bee;;

 1: len 4; hex 803c4393; asc  &amp;lt;C ;;



*** WE ROLL BACK TRANSACTION (2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>劫持 Java 应用 HTTP 请求</title>
      <link>https://www.ffutop.com/posts/2020-10-19-hijack-http-req/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-10-19-hijack-http-req/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;全链路追踪中，针对部分特殊的流量，希望将它引导到特定服务上（这个特定服务不在正常请求的链路上）——问题可以被抽象为解决进程间通信过程中目标进程的选择。&lt;/p&gt;
&lt;p&gt;进程间通信方式很多，本篇只关注 Java 进程间套接字通信下 HTTP 形式的请求劫持，引导特定流量到特定进程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tcp Tunnel</title>
      <link>https://www.ffutop.com/posts/2020-08-06-tun/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-08-06-tun/</guid>
      <description>&lt;p&gt;所谓专用网络(Private Network)，本质上不过是物理上局域网概念的延伸，将分属两地的局域网络联通，构建一个更大的逻辑局域网，并保证通信的私密性和独占性。最质朴的物理解决方案——在两个局域网络之间拉一个网线；不过距离越远，成本越高，还得考虑信号衰减等问题。相对而言租用运营商的线路就比较实际。但终究物理上的解决方案相较于使用互联网还是过于高昂，如何通过互联网构建一个逻辑上的专用网络？虚拟专用网络(Virtual Private Network, VPN) 提供了答案。&lt;/p&gt;
&lt;p&gt;要构建 VPN ，最基本的要求是两地局域网络互通。即如下图中的设备 &lt;code&gt;172.16.1.1&lt;/code&gt; 要像在同一个局域网内，对内网 IP (分属不同的局域网)为 &lt;code&gt;172.20.1.2&lt;/code&gt; 的设备发起并建立连接。但从基本的网络协议栈来看，IP 报文根本无法到达 B 区域的局域网。得益于分层的协议栈，TCP/IP 的五个层次，上下层次间通过接口和服务来通信，每个层次仅仅承载数据(payload)而不关心数据的格式和内容。理论上任何层次的数据都可以由其它任何层次或者它当前的层次所承载，也就出现了很多 XX over YY 的网络模型。在 A 区域将 IP 报文通过 YY 协议封装，到 B 区域再解包，像是从局域网内收到 IP 报文一样，发送给目的主机，就像是 IP 报文穿越了一条隧道。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;+-------------------------------------------------------+
|                       A 地区                          |
| +------------+  +------------+       +--------------+ |
| | 172.16.1.1 |  | 172.16.1.2 |  .... | 172.16.39.60 | |
| +------+-----+  +------+-----+       +-------+------+ |
|        |               |                     |        |
|        +---------------+-----+---------------+        |
|                              |                        |
|                         +----+----+                   |
|                         |   NAT   |                   |
|                         +----^----+                   |
                               |
                               |
    +--------------------------v------------------+
    |    INTERNET                     INTERNET    |
    +--------------------------^------------------+
                               |
|                              |                        |
|                         +----v----+                   |
|                         |   NAT   |                   |
|                         +----+----+                   |
|                              |                        |
|        +---------------+-----+---------------+        |
|        |               |                     |        |
| +------------+  +------------+       +--------------+ |
| | 172.20.1.1 |  | 172.20.1.2 |  .... | 172.20.39.60 | |
| +------+-----+  +------+-----+       +-------+------+ |
|                       B 地区                          |
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>URI不规范编码解决方案</title>
      <link>https://www.ffutop.com/posts/2020-07-25-non-standard-uri/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-07-25-non-standard-uri/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tools.ietf.org/rfc/rfc7230.txt&#34;&gt;RFC 7230&lt;/a&gt; 与 &lt;a href=&#34;https://tools.ietf.org/rfc/rfc3986.txt&#34;&gt;RFC 3986&lt;/a&gt; 定义了 HTTP/1.1 标准并对 URI 的编解码问题作出了规范。但是，文本形式的规范和最终落地的标准之间总是存在着差距。标准中共 82 个字符无需编码。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789:/?#@!$&amp;amp;&#39;()*+,;_-.~
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于需要编码的字符，百分号编码方案要求 ASCII 字符表示成两个 16 进制值并添加前缀 &lt;code&gt;%&lt;/code&gt;；对于非 ASCII 字符, 需要转换为 UTF-8 字节序, 然后每个字节按照上述方式表示成两个 16 进制值并添加前缀 &lt;code&gt;%&lt;/code&gt;。比如 &lt;code&gt;|&lt;/code&gt; 将被表示为 &lt;code&gt;%7C&lt;/code&gt; 或 &lt;code&gt;%7c&lt;/code&gt;（大小写无关）；&lt;code&gt;啊&lt;/code&gt; 将被表示为 &lt;code&gt;%E5%95%8A&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最近因为 Tomcat 版本升级，遭遇了非标到标准实现的过渡，新版本 Tomcat 严格执行 RFC 规范直接将非标准的 URI 请求强制拒绝。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;2020-07-15 16:02:12,931  INFO 1 --- [http-nio-8080-exec-7] o.a.c.h.Http11Processor                  : Error parsing HTTP request header
 Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level.
java.lang.IllegalArgumentException: Invalid character found in the request target. The valid characters are defined in RFC 7230 and RFC 3986
        at org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:468) ~[tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:294) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_161]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_161]
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.22.jar!/:9.0.22]
        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>纠缠不清的 OAuth vs OpenId</title>
      <link>https://www.ffutop.com/posts/2020-07-17-oauth-and-openid/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-07-17-oauth-and-openid/</guid>
      <description>认证: 完成对用户身份的确认，验证当前自称为某种身份的用户，确实是所声称的用户 授权: 一般指对特定身份的用户授予访问数字化资源的权限 OAuth 2.0 是一个关</description>
    </item>
    
    <item>
      <title>Dubbo Telnet 调试</title>
      <link>https://www.ffutop.com/posts/2020-06-17-dubbo-telnet/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-06-17-dubbo-telnet/</guid>
      <description>&lt;p&gt;始于 Dubbo 2.0.6 的 Telnet Command 是一个令人兴奋的特性，极大地降低了服务化测试的成本，但是，&lt;a href=&#34;http://dubbo.apache.org/zh-cn/docs/user/references/telnet.html&#34;&gt;寥寥数行的可怜文档&lt;/a&gt;无形地为使用增加了成本。此前虽然一直在使用 Telnet Command，但基本上是浅尝辄止，字符集的问题、重载方法的错误筛选等，都让我不得不对这个特性敬而远之，无法作为高频的生产力工具。最近，频繁出现的调试需求让我不得不尝试接受并熟悉 Dubbo Telnet Command。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文只针对 invoke 命令，基于 Dubbo 版本 2.6.7&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Dubbo Telnet Command &lt;code&gt;invoke&lt;/code&gt; 命令的一般格式为 &lt;code&gt;invoke &amp;lt;全限定名&amp;gt;.&amp;lt;方法名&amp;gt;(&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;)&lt;/code&gt;。其中参数需要能被 JSON 解析，即提取命令中的 &lt;code&gt;&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;&lt;/code&gt; 部分，并包装上 &lt;code&gt;[]&lt;/code&gt; 构成 &lt;code&gt;[&amp;lt;参数&amp;gt;,...,&amp;lt;参数&amp;gt;]&lt;/code&gt; ，需要保证这个串是一个合法的 JSON Array。&lt;/p&gt;
&lt;p&gt;本文提供的示例均可在 &lt;a href=&#34;https://github.com/ffutop/dubbo-telnet-playground&#34;&gt;dubbo-telnet-playground&lt;/a&gt; 中找到。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>URI 与资源定义</title>
      <link>https://www.ffutop.com/posts/2020-05-23-uri/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-05-23-uri/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;URI syntax:
&lt;code&gt;&amp;lt;scheme&amp;gt;:&amp;lt;scheme-specific-part&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;generic URI syntax:
&lt;code&gt;&amp;lt;scheme&amp;gt;://&amp;lt;authority&amp;gt;&amp;lt;path&amp;gt;?&amp;lt;query&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此前对 URI、URL 的定义一知半解，网上充斥着大量文档试图描述 URI、URL、URN 的区别。其中一种经典的观点是：URI 是 URN、URL 的超集。其中 URN 被用来描述资源的名称(身份ID)，而 URL 被用来描述查找该资源的方法。这个表述确实没有问题，但对于理解 URx 无法提供切实的帮助。最近阅读了 &lt;a href=&#34;https://tools.ietf.org/html/rfc3305&#34;&gt;RFC 3305&lt;/a&gt;、&lt;a href=&#34;https://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt;、&lt;a href=&#34;https://tools.ietf.org/html/rfc7595&#34;&gt;RFC 7595&lt;/a&gt; 等资料，本文将聊聊个人对 URI 的见解，以及借此回顾此前参与的公司权限系统的设计。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTTP Large Header Fields Problem</title>
      <link>https://www.ffutop.com/posts/2020-04-11-large-http-header/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.ffutop.com/posts/2020-04-11-large-http-header/</guid>
      <description>&lt;p&gt;&lt;em&gt;首次遇到请求头过大的问题，做个记录。特别是在本次处理陷入了误区，做了太多无谓的猜测&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;请求头过大导致响应错误码 400 (Bad Request)、414 (URI Too Long)、431 (Request Header Fields Too Large) 的情况不多，不过原因和解决方案都是比较清晰的。客户端请求的请求头过大导致超出了服务器支持的缓冲区。如果客户端可控，控制请求头的大小；否则，适当调大服务器配置的缓冲区大小。&lt;/p&gt;
&lt;p&gt;最近生产上碰到了这个问题，颇费了一番功夫。接手问题时得到了几个错误的信息，干扰到了处理的全过程。甚至为此去重读了 NGINX Directive &lt;code&gt;client_header_buffer_size&lt;/code&gt; 和 &lt;code&gt;large_client_header_buffers&lt;/code&gt; 在 1.8.1 版本的实现。&lt;/p&gt;
&lt;p&gt;最原始的问题是：NGINX 接收到了大请求头(4.5k)的请求，最终响应了错误码 400 Bad Request 。&lt;/p&gt;
&lt;p&gt;真实的背景因素包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求链路 NGINX -&amp;gt; k8s nginx ingress -&amp;gt; k8s pods (Tomcat)&lt;/li&gt;
&lt;li&gt;NGINX &lt;code&gt;large_client_header_buffers&lt;/code&gt; 使用了默认配置 &lt;code&gt;4 8k&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Tomcat maxHttpHeaderSize 使用了默认配置 (default 8192)&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>